substitutions:
  name: tiltsense
  friendly_name: TiltSense

esphome:
  name: "${name}"
  friendly_name: "${friendly_name}"

esp32:
  board: esp32-s3-devkitc-1
  variant: esp32s3
  framework:
    type: arduino
    version: latest
  flash_size: 16MB

logger:
  level: INFO

api:

ota:
  - platform: esphome

wifi:
  ap: {}

captive_portal:

web_server:
  port: 80

globals:
  - id: last_ble_update
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: last_touch_time
    type: unsigned long
    restore_value: no
    initial_value: '0'
  - id: screen_dimmed
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: last_touch_x
    type: int
    initial_value: '0'
  - id: last_touch_y
    type: int
    initial_value: '0'
  - id: enable_tilt_black
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: enable_tilt_purple
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: enable_tilt_red
    type: bool
    restore_value: true
    initial_value: 'true'
  - id: current_page
    type: int
    restore_value: no
    initial_value: '0'  # 0 = black, 1 = purple, 2 = red

esp32_ble_tracker:
  scan_parameters:
    interval: 10000ms
    window: 1000ms
  on_ble_advertise:
    then:
      - lambda: |-
          if (x.get_ibeacon().has_value()) {
            auto ibeacon = x.get_ibeacon().value();
            std::string uuid = ibeacon.get_uuid().to_string();

            if (uuid == "A495BB30-C5B1-4B44-B512-1370F02D74DE" && id(enable_tilt_black)) {
              float temp_c = (ibeacon.get_major() - 32) * 5.0f / 9.0f;
              float gravity = ibeacon.get_minor();
              ESP_LOGD("tilt", "[BLACK] Publishing: Temperature = %.2f °C, Gravity = %.0f", temp_c, gravity);
              id(tilt_temperature_black).publish_state(temp_c);
              id(tilt_gravity_black).publish_state(gravity);
            }
            else if (uuid == "A495BB40-C5B1-4B44-B512-1370F02D74DE" && id(enable_tilt_purple)) {
              float temp_c = (ibeacon.get_major() - 32) * 5.0f / 9.0f;
              float gravity = ibeacon.get_minor();
              ESP_LOGD("tilt", "[PURPLE] Publishing: Temperature = %.2f °C, Gravity = %.0f", temp_c, gravity);
              id(tilt_temperature_purple).publish_state(temp_c);
              id(tilt_gravity_purple).publish_state(gravity);
            }
            else if (uuid == "A495BB10-C5B1-4B44-B512-1370F02D74DE" && id(enable_tilt_red)) {
              float temp_c = ((ibeacon.get_major() / 10.0f) - 32.0f) * 5.0f / 9.0f;
              float gravity = ibeacon.get_minor() / 10.0f;
              ESP_LOGD("tilt", "[RED] Publishing: Temperature = %.2f °C, Gravity = %.1f", temp_c, gravity);
              id(tilt_temperature_red).publish_state(temp_c);
              id(tilt_gravity_red).publish_state(gravity);
            }
          }

#switch:

sensor:
  - platform: internal_temperature
    name: "${friendly_name} Internal Temperature"

  - platform: adc
    pin: GPIO01
    name: "${friendly_name} Battery Voltage"
    id: battery_voltage
    unit_of_measurement: "V"
    accuracy_decimals: 2
    device_class: voltage
    entity_category: diagnostic
    update_interval: 30s
    attenuation: auto
    filters:
      - calibrate_linear:
          - 1.49 -> 4.16
          - 1.26 -> 4.01
          - 1.20 -> 3.95
          - 1.07 -> 3.90
          - 1.04 -> 3.83
          - 1.02 -> 3.78
          - 1.00 -> 3.71
          - 0.96 -> 3.61

  - platform: template
    name: "${friendly_name} Battery Level"
    unit_of_measurement: "%"
    device_class: battery
    entity_category: diagnostic
    accuracy_decimals: 0
    lambda: |-
      float v = id(battery_voltage).state;
      float percent = 100.0 / (1.0 + exp(-10.0 * (v - 3.85)));
      if (percent > 100.0) return 100.0;
      else if (percent < 0.0) return 0.0;
      else return percent;

  - platform: template
    id: tilt_gravity_black
    name: "Tilt Black Gravity"
    icon: "mdi:trending-down"
    accuracy_decimals: 0
    unit_of_measurement: "SG"
    update_interval: never
    on_value:
      then:
        - lvgl.label.update:
            id: ble_gravity_label_black
            text: !lambda |-
              char buffer[8];
              snprintf(buffer, sizeof(buffer), "%.3f", id(tilt_gravity_black).state / 1000.0);
              return std::string(buffer);

  - platform: template
    name: "Tilt Black Temperature"
    id: tilt_temperature_black
    device_class: "temperature"
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    update_interval: never
    on_value:
      then:
        - lvgl.label.update:
            id: ble_temp_label_black
            text: !lambda |-
              char buffer[10];
              snprintf(buffer, sizeof(buffer), "%.1f °C", id(tilt_temperature_black).state);
              return std::string(buffer);

psram:
  mode: quad
  speed: 80MHz

external_components:
  - source: github://GadgetFactory/CST816S_touchscreen@1.0.0

spi:
  clk_pin: GPIO10
  mosi_pin: GPIO11

output:
  - platform: ledc
    pin:
      number: GPIO02
    id: backlight_output

light:
  - platform: monochromatic
    output: backlight_output
    name: "${friendly_name} Display Backlight"
    id: led
    restore_mode: ALWAYS_ON
    default_transition_length: 0s
    internal: True
              
display:
  - platform: ili9xxx
    model: GC9A01A
    id: lcd_display
    invert_colors: true
    data_rate: 80MHz
    cs_pin: GPIO09
    dc_pin: GPIO08
    reset_pin: GPIO14
    auto_clear_enabled: false
    rotation: 0

touchscreen:
  platform: cst816
  id: tiltsense_touchscreen
  interrupt_pin: GPIO05
  reset_pin: GPIO13
  on_touch:
    then:
      - lambda: |-
          int x = touch.x;
          int y = touch.y;

          id(last_touch_x) = x;
          id(last_touch_y) = y;
          id(handle_touch).execute();

lvgl:
  id: lvgl_id
  displays:
    - lcd_display
  touchscreens:
    - tiltsense_touchscreen
  pages:
    - id: display_black
      widgets:
        - arc:
            id: border_circle_black
            align: CENTER
            arc_color: !lambda |-
              if (id(enable_tilt_black)) {
                return lv_color_hex(0x000000);
              } else {
                return lv_color_hex(0x808080);
              }
            arc_rounded: true
            arc_width: 20
            width: 220
            height: 220
        - label:
            id: ble_gravity_label_black
            align: CENTER
            text: " "
            text_font: montserrat_48
            y: -35
        - label:
            id: ble_temp_label_black
            align: CENTER
            text: " "
            text_font: montserrat_26
            y: 10
        - label:
            id: pressure_label_black
            align: CENTER
            text: " "
            text_font: montserrat_20
            text_color: 0x707070
            y: 60
        - label:
            align: CENTER
            text: "Tilt Black"
            text_font: montserrat_16
            y: 90
    - id: display_purple
      widgets:
        - arc:
            id: border_circle_purple
            align: CENTER
            arc_color: !lambda |-
              if (id(enable_tilt_purple)) {
                return lv_color_hex(0x800080);
              } else {
                return lv_color_hex(0x808080);
              }
            arc_rounded: true
            arc_width: 20
            width: 220
            height: 220
        - label:
            id: ble_gravity_label_purple
            align: CENTER
            text: " "
            text_font: montserrat_48
            y: -35
        - label:
            id: ble_temp_label_purple
            align: CENTER
            text: " "
            text_font: montserrat_26
            y: 10
        - label:
            id: pressure_label_purple
            align: CENTER
            text: " "
            text_font: montserrat_20
            text_color: 0x707070
            y: 60
        - label:
            align: CENTER
            text: "Tilt Purple"
            text_font: montserrat_16
            y: 90
    - id: display_red
      widgets:
        - arc:
            id: border_circle_red
            align: CENTER
            arc_color: !lambda |-
              if (id(enable_tilt_red)) {
                return lv_color_hex(0xFF0000);
              } else {
                return lv_color_hex(0x808080);
              }
            arc_rounded: true
            arc_width: 20
            width: 225
            height: 225
        - label:
            id: ble_gravity_label_red
            align: CENTER
            text: " "
            text_font: montserrat_48
            y: -35
        - label:
            id: ble_temp_label_red
            align: CENTER
            text: " "
            text_font: montserrat_26
            y: 10
        - label:
            id: pressure_label_red
            align: CENTER
            text: " "
            text_font: montserrat_20
            text_color: 0x707070
            y: 60
        - label:
            align: CENTER
            text: "Tilt Red"
            text_font: montserrat_16
            y: 90