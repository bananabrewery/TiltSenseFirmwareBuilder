{
  "esphome": {
    "name": "tiltsense",
    "friendly_name": "TiltSense"
  },
  "esp32": {
    "board": "esp32-s3-devkitc-1",
    "variant": "esp32s3",
    "framework": {
      "type": "arduino",
      "version": "latest"
    },
    "flash_size": "16MB"
  },
  "logger": {
    "level": "INFO"
  },
  "api": null,
  "ota": [
    {
      "platform": "esphome"
    }
  ],
  "wifi": {
    "ap": {}
  },
  "captive_portal": null,
  "web_server": {
    "port": 80
  },
  "globals": [
    {
      "id": "last_ble_update",
      "type": "unsigned long",
      "restore_value": "no",
      "initial_value": "0"
    },
    {
      "id": "last_touch_time",
      "type": "unsigned long",
      "restore_value": "no",
      "initial_value": "0"
    },
    {
      "id": "screen_dimmed",
      "type": "bool",
      "restore_value": "no",
      "initial_value": "false"
    },
    {
      "id": "last_touch_x",
      "type": "int",
      "initial_value": "0"
    },
    {
      "id": "last_touch_y",
      "type": "int",
      "initial_value": "0"
    },
    {
      "id": "enable_tilt_black",
      "type": "bool",
      "restore_value": true,
      "initial_value": "true"
    },
    {
      "id": "enable_tilt_purple",
      "type": "bool",
      "restore_value": true,
      "initial_value": "true"
    },
    {
      "id": "enable_tilt_red",
      "type": "bool",
      "restore_value": true,
      "initial_value": "true"
    },
    {
      "id": "current_page",
      "type": "int",
      "restore_value": "no",
      "initial_value": "0"
    }
  ],
  "esp32_ble_tracker": {
    "scan_parameters": {
      "interval": "5000ms",
      "window": "1000ms"
    },
    "on_ble_advertise": {
      "then": []
    }
  },
  "switch": [],
  "sensor": [
    {
      "platform": "internal_temperature",
      "name": "${friendly_name} Internal Temperature"
    },
    {
      "platform": "adc",
      "pin": "GPIO01",
      "name": "${friendly_name} Battery Voltage",
      "id": "battery_voltage",
      "unit_of_measurement": "V",
      "accuracy_decimals": 2,
      "device_class": "voltage",
      "entity_category": "diagnostic",
      "update_interval": "30s",
      "attenuation": "auto",
      "filters": [
        {
          "calibrate_linear": [
            "1.49 -> 4.16",
            "1.26 -> 4.01",
            "1.20 -> 3.95",
            "1.07 -> 3.90",
            "1.04 -> 3.83",
            "1.02 -> 3.78",
            "1.00 -> 3.71",
            "0.96 -> 3.61"
          ]
        }
      ]
    },
    {
      "platform": "template",
      "name": "${friendly_name} Battery Level",
      "unit_of_measurement": "%",
      "device_class": "battery",
      "entity_category": "diagnostic",
      "accuracy_decimals": 0,
      "lambda": "float v = id(battery_voltage).state;\nfloat percent = 100.0 / (1.0 + exp(-10.0 * (v - 3.85)));\nif (percent > 100.0) return 100.0;\nelse if (percent < 0.0) return 0.0;\nelse return percent;"
    }
  ],
  "script": [
    {
      "id": "handle_touch",
      "mode": "restart",
      "then": [
        {
          "lambda": "id(last_touch_time) = millis();"
        },
        {
          "if": {
            "condition": {
              "lambda": "return id(screen_dimmed);"
            },
            "then": [
              {
                "light.turn_on": {
                  "id": "led",
                  "brightness": "100%"
                }
              },
              {
                "lambda": "id(screen_dimmed) = false;"
              }
            ],
            "else": [
              {
                "if": {
                  "condition": {
                    "lambda": "return id(last_touch_y) > 220;"
                  },
                  "then": [
                    {
                      "lambda": ""
                    }
                  ]
                }
              },
              {
                "if": {
                  "condition": {
                    "lambda": "return id(last_touch_x) < 60 && id(current_page) > 0;"
                  },
                  "then": [
                    {
                      "lambda": "id(current_page) -= 1;"
                    },
                    {
                      "if": {
                        "condition": {
                          "lambda": "return id(current_page) == 0;"
                        },
                        "then": [
                          {
                            "lvgl.page.show": {
                              "id": "display_black",
                              "animation": "MOVE_RIGHT",
                              "time": "200ms"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "if": {
                        "condition": {
                          "lambda": "return id(current_page) == 1;"
                        },
                        "then": [
                          {
                            "lvgl.page.show": {
                              "id": "display_purple",
                              "animation": "MOVE_RIGHT",
                              "time": "200ms"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              },
              {
                "if": {
                  "condition": {
                    "lambda": "return id(last_touch_x) > 180 && id(current_page) < 2;"
                  },
                  "then": [
                    {
                      "lambda": "id(current_page) += 1;"
                    },
                    {
                      "if": {
                        "condition": {
                          "lambda": "return id(current_page) == 1;"
                        },
                        "then": [
                          {
                            "lvgl.page.show": {
                              "id": "display_purple",
                              "animation": "MOVE_LEFT",
                              "time": "200ms"
                            }
                          }
                        ]
                      }
                    },
                    {
                      "if": {
                        "condition": {
                          "lambda": "return id(current_page) == 2;"
                        },
                        "then": [
                          {
                            "lvgl.page.show": {
                              "id": "display_red",
                              "animation": "MOVE_LEFT",
                              "time": "200ms"
                            }
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      ]
    }
  ],
  "psram": {
    "mode": "quad",
    "speed": "80MHz"
  },
  "external_components": [
    {
      "source": "github://GadgetFactory/CST816S_touchscreen@1.0.0"
    }
  ],
  "spi": {
    "clk_pin": "GPIO10",
    "mosi_pin": "GPIO11"
  },
  "output": [
    {
      "platform": "ledc",
      "pin": {
        "number": "GPIO02"
      },
      "id": "backlight_output"
    }
  ],
  "light": [
    {
      "platform": "monochromatic",
      "output": "backlight_output",
      "name": "${friendly_name} Display Backlight",
      "id": "led",
      "restore_mode": "ALWAYS_ON",
      "default_transition_length": "0s",
      "internal": true
    }
  ],
  "display": [
    {
      "platform": "ili9xxx",
      "model": "GC9A01A",
      "id": "lcd_display",
      "invert_colors": true,
      "data_rate": "80MHz",
      "cs_pin": "GPIO09",
      "dc_pin": "GPIO08",
      "reset_pin": "GPIO14",
      "auto_clear_enabled": false,
      "rotation": 0
    }
  ],
  "i2c": {
    "sda": "GPIO06",
    "scl": "GPIO07"
  },
  "touchscreen": {
    "platform": "cst816",
    "id": "tiltsense_touchscreen",
    "interrupt_pin": "GPIO05",
    "reset_pin": "GPIO13",
    "on_touch": {
      "then": [
        {
          "lambda": "int x = touch.x;\nint y = touch.y;\n\nid(last_touch_x) = x;\nid(last_touch_y) = y;\nid(handle_touch).execute();"
        }
      ]
    }
  },
  "lvgl": {
    "id": "lvgl_id",
    "displays": [
      "lcd_display"
    ],
    "touchscreens": [
      "tiltsense_touchscreen"
    ],
    "pages": [
    ]
  }
}